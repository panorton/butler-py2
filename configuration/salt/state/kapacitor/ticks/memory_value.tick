{% raw %}
// Parameters
var info = 70
var warn = 85
var crit = 92
var infoSig = 2.5
var warnSig = 3
var critSig = 3.5
var period = 10s
var every = 10s

// Dataframe
var data = stream
  |from()
    .database('metrics')
    .retentionPolicy('default')
    .measurement('memory_value')
    .where(lambda: "type" == 'memory' AND "type_instance" == 'free')
#    .groupBy('host')
  |eval(lambda: 100 - "value")
    .as('used')
  |window()
    .period(period)
    .every(every)
  |mean('used')
    .as('stat')
    
// Thresholds
var alert = data
  |eval(lambda: sigma("stat"))
    .as('sigma')
    .keep()
  |alert()
    .id('{{ index .Tags "host"}}/memory_value')
    .message('{{ .ID }}:{{ index .Fields "stat" }}')
#    .info(lambda: "stat" > info OR "sigma" > infoSig)
    .warn(lambda: "stat" > warn OR "sigma" > warnSig)
    .crit(lambda: "stat" > crit OR "sigma" > critSig)

// Alert
alert


session.post('http://localhost:8000/login', json={
    'username': 'butler_admin',
    'password': 'butler_admin',
    'eauth': 'auto',
})

resp = session.post('http://localhost:8000', json=[{
    'client': 'local',
    'tgt': 'tracker',
    'fun': 'service.restart',
    'arg': ['airflow-scheduler'],
}])
  .log('/tmp/mem_alert_log.txt')
  
{% endraw %}